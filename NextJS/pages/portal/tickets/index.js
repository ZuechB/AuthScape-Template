import React, {useEffect, useState} from 'react';
import Head from 'next/head';
import {apiService, authService} from 'authscape';
import Button from '@mui/material/Button';
import { Box } from '@mui/system';
import {
  DataGrid,
  GridActionsCellItem,
} from "@mui/x-data-grid";
import Layout from "../../../components/portalLayout";
import DeleteRoundedIcon from "@mui/icons-material/DeleteRounded";
import Typography from '@mui/material/Typography';
import AppBar from '@mui/material/AppBar';
import Toolbar from '@mui/material/Toolbar';
import MessageRoundedIcon from '@mui/icons-material/MessageRounded';
import YesNoDialog from '../../../components/yesNoDialog';
import VisibilityRoundedIcon from '@mui/icons-material/VisibilityRounded';
import AddRoundedIcon from '@mui/icons-material/AddRounded';

export default function Home({loadedUser, setIsLoading, currentUser}) {

  const [tickets, setTickets] = useState([]);
  const [ticketId, setTicketId] = useState(null);
  const [archiveTicketId, setArchiveTicketId] = useState(null);
  const [totalTickets, setTotalTickets] = useState(0);
  const [pageNumber, setPageNumber] = useState(1);
  
  const columns = [
    { field: 'id', headerName: 'Id', width: 150 },
    { field: 'title', flex: 1, headerName: 'Customer', width: 200 },
    // { field: 'subject', headerName: 'Subject', width: 200 },
    { field: 'ticketStatus', headerName: 'Status', width: 150 },
    { field: 'ticketType', headerName: 'Ticket Type', width: 150 },
    { field: 'created', headerName: 'Created', width: 150 },
    // { field: 'col6', headerName: 'Created By', width: 150 },
    // { field: 'col7', headerName: 'Company Name', width: 150 },
    { field: 'ticketParticipants', headerName: 'Participants', width: 150 },
    { field: 'messages', headerName: 'Messages', width: 150 },
    {
      field: "actions",
      type: "actions",
      width: 200,
      headerName: "Actions",
      cellClassName: "actions",
      getActions: ({ id, row }) => {
        return [
          <GridActionsCellItem key={id}
            icon={<VisibilityRoundedIcon />}
            label="View"
            onClick={() => {
              window.location.href = "/ticket/" + row.id;
            }}
          />,
          <GridActionsCellItem key={id}
            icon={<DeleteRoundedIcon />}
            label="Delete"
            className="textPrimary"
            onClick={() => {
              setArchiveTicketId(row.id);
            }}
          />,
        ];
      },
    }
  ];

  const reloadTickets = async () => {  
    let response = await apiService().get("/ticket/GetTickets?pageNumber=" + pageNumber + "&pageSize=20");
    if (response != null && response.status == 200)
    {
        setTotalTickets(response.data.total);
        setTickets(response.data.data);
    }
  }

  useEffect(() => {

    if (loadedUser)
    {
      reloadTickets();
    }

  }, [loadedUser]);
  


  return (
  <div>
    <Head>
      <title>Ticket System</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>

    <Layout currentUser={currentUser}>

      <Box sx={{ flexGrow: 1 }}>
        <AppBar position="static" color='inherit' elevation={0}>
          <Toolbar>
            <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
              Tickets
            </Typography>
            <Button color="primary" variant="contained" startIcon={<AddRoundedIcon/>} onClick={async () => {
              
              let response = await apiService().post("/Ticket/CreateTicket", {
                ticketTypeId: 1,
                ticketStatusId: 1,
                description: "about this",
                message: "More about this"
              });

              alert(JSON.stringify(response.data));
              window.location.href = "/ticket/" + response.data;

            }}>Create Ticket</Button>
          </Toolbar>
        </AppBar>
      </Box>

      <Box sx={{height: 600, width: '100%' }}>
        <DataGrid 
          rows={tickets} 
          columns={columns}
          onPageChange={(newPage) => {
            setPageNumber(newPage);
          }}
          pageSize={totalTickets} 
          rowsPerPageOptions={[20]}
          /> 
      </Box>

      <YesNoDialog open={archiveTicketId != null ? true : false} title={"Remove Ticket"} message={"Are you sure you want to archive this ticket?"} 
        YesAction={async () => {
          await apiService().delete("/Ticket/ArchiveTicket?id=" + archiveTicketId);
          await reloadTickets();
          setArchiveTicketId(null);
        }} 
        NoAction={() => {
          setArchiveTicketId(null);
        }} />
    </Layout>
  </div>
    
  )
}
